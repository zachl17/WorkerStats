@page "/accountreviewstats"

@using WorkerStats.Data
@using System.Timers
@using Microsoft.Extensions.Logging
@inject WorkerStatsService WorkerStatsService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject ILogger<WorkerStatsService> Logger

@if (workerStats == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                @*<h5>@loggedInUsername</h5>*@
                <form class="form-inline" role="form">
                    <div class="form-group">
                        <label for="beginDate">Start Date:</label>
                        <input type="date" class="form-control" @bind="@startDateString">
                    </div>
                    <div class="form-group">
                        <label for="endDate">End Date:</label>
                        <input type="date" class="form-control" @bind="@endDateString">
                    </div>
                    <label for="beginDate">Name To Filter By:</label>
                    <select class="form-control" @bind="uniqueUserToSearch">
                        @*Show empty value on form*@
                        <option value=""></option>
                        @*Only show unique users*@
                        @foreach (var uniqueUser in uniqueUsers)
                        {
                            <option value="@uniqueUser">@uniqueUser</option>
                        }
                    </select>
                    <label for="beginDate">Type To Filter By:</label>
                    <select class="form-control" @bind="inWorker">
                        @*Show empty value on form*@
                        <option value=""></option>
                        @*Only show unique workers*@
                        @foreach (var uniqueWorker in uniqueWorkers)
                        {
                            <option value="@uniqueWorker">@uniqueWorker</option>
                        }
                    </select>
                    <button type="button" class="btn btn-default" @onclick="SearchStats">Search</button>
                </form>
            </div>
        </div>
        <h4>This page will automatically refresh every 5 minutes to get up to date stats</h4>
        <h3>AR Department Worker Stats</h3>
        <div class="row">
            <div class="col-md-12">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Employee</th>
                            <th>Average</th>
                            <th>Count</th>
                            <th>Type</th>
                            <th>Time Spent</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var workerStat in workerStats)
                        {
                            <tr>
                                <td>@workerStat.Username</td>
                                <td>@workerStat.AverageSecondsElapsed</td>
                                <td>@workerStat.Count</td>
                                <td>@workerStat.InWorker</td>
                                <td>@workerStat.ConvertedTimeSpent</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Totals</b></td>
                            @foreach (var workerStat in workerStats)
                            {
                                totalCount += long.Parse(workerStat.Count);
                                totalTimeSpent += long.Parse(workerStat.TimeSpent);
                            }
                            <td></td>
                            <td><b>@totalCount</b></td>
                            <td></td>
                            <td><b>@WorkerStatsService.convertSeconds(totalTimeSpent.ToString())</b></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <!--<div class="col-md-6" id="searchForm">
                <h3>Search Worker Stats</h3>
                <form class="form" role="form">
                    <div class="form-group">
                        <label for="beginDate">Beginning Date:</label>
                        <input type="date" class="form-control" @bind="@startDateString">
                    </div>
                    <div class="form-group">
                        <label for="endDate">End Date:</label>
                        <input type="date" class="form-control" @bind="@endDateString">
                    </div>
                    <label for="beginDate">Name To Filter By:</label>
                    <select class="form-control" @bind="uniqueUserToSearch">-->
                        @*Show empty value on form*@
                        <!--<option value=""></option>-->
                        @*Only show unique users*@
                        <!--@foreach (var uniqueUser in uniqueUsers)
                        {
                            <option value="@uniqueUser">@uniqueUser</option>
                        }
                    </select>
                    <label for="beginDate">Type To Filter By:</label>
                    <select class="form-control" @bind="inWorker">-->
                        @*Show empty value on form*@
                        <!--<option value=""></option>-->
                        @*Only show unique workers*@
                        <!--@foreach (var uniqueWorker in uniqueWorkers)
                        {
                            <option value="@uniqueWorker">@uniqueWorker</option>
                        }
                    </select>
                    <button type="button" class="btn btn-default" @onclick="SearchStats">Search</button>
                </form>
            </div>-->
            <div class="col-md-12">
                <h3>AR Department Remaining Totals</h3>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Total Remaining</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var workerStatsRemainingTotal in workerStatsRemainingTotals)
                        {
                            remainingTotalCount += long.Parse(workerStatsRemainingTotal.Count);
                            <tr>
                                <td>@workerStatsRemainingTotal.InWorker</td>
                                <td>@workerStatsRemainingTotal.Count</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Totals</b></td>
                            <td><b>@remainingTotalCount</b></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private string loggedInUsername = Environment.UserName;
    private string currentPage = "AccountReviewPage";
    private string currentPageForReload = "/accountreviewstats";
    private static Timer aTimer;

    //for form fields
    private string inWorker;
    private string uniqueUserToSearch;
    public static DateTime currentDate = DateTime.Now;
    string currentDateString = currentDate.ToString("yyyy-MM-dd");
    DateTime startDateString = currentDate;
    DateTime endDateString = currentDate;

    //lists to populate component's data with
    private List<WorkerStats> workerStats { get; set; }
    private List<WorkerStats> workerStatsRemainingTotals { get; set; }
    private List<string> uniqueUsers = new List<string>();
    private List<string> uniqueWorkers = new List<string>();

    public long totalCount;
    public long remainingTotalCount;
    public long totalTimeSpent;

    protected override async Task OnInitializedAsync()
    {
        aTimer = new System.Timers.Timer();
        //set timer to 5 minutes (300000 milliseconds)
        aTimer.Interval = 300000;
        //hook up the Elapsed event for the timer
        aTimer.Elapsed += OnTimedEvent;
        //have the timer fire repeated events (true is the default)
        aTimer.AutoReset = true;
        //start the timer
        aTimer.Enabled = true;

        //get todays stats from the AllWorkerStats table
        workerStats = await WorkerStatsService.GetStatsAsync(currentPage);
        workerStatsRemainingTotals = await WorkerStatsService.GetRemainingTotalsAsync(currentPage);

        //get unique usernames from workerStats list that was just returned to populate the form with
        uniqueUsers = workerStats.Select(uName => uName.Username.ToUpper()).Distinct().ToList();
        //get unique worker types from workerStats list that was just returned to populate the form with
        uniqueWorkers = workerStats.Select(worker => worker.InWorker).Distinct().ToList();
    }

    //event to fire after millisecods elapsed = interval
    private void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        navigationManager.NavigateTo(currentPageForReload);
    }

    //search workerstats table based on values in form
    protected void SearchStats()
    {
        string startDate = startDateString.ToString("yyyy-MM-dd");
        string endDate = endDateString.ToString("yyyy-MM-dd");
        //stop the timer
        aTimer.Enabled = false;

        if (startDateString <= endDateString)
        {
            if (String.IsNullOrEmpty(uniqueUserToSearch) && String.IsNullOrEmpty(inWorker))
            {
                navigationManager.NavigateTo($"/searchresults/{startDate}/{endDate}");
            }
            else if (!String.IsNullOrEmpty(uniqueUserToSearch) && String.IsNullOrEmpty(inWorker))
            {
                navigationManager.NavigateTo($"/searchresults/user/{startDate}/{endDate}/{uniqueUserToSearch}");
            }
            else if (String.IsNullOrEmpty(uniqueUserToSearch) && !String.IsNullOrEmpty(inWorker))
            {
                navigationManager.NavigateTo($"/searchresults/worker/{startDate}/{endDate}/{inWorker}");
            }
            else
            {
                navigationManager.NavigateTo($"/searchresults/{startDate}/{endDate}/{uniqueUserToSearch}/{inWorker}");
            }
        }
        else
        {
            navigationManager.NavigateTo($"/error/{startDate}/{endDate}/");
        }
    }
}
