@*This page is used if the worker is specified in the search and the user is not*@
@page "/searchresults/{startDateTime}/{endDateTime}"
@*This page is used if the worker is specified in the search and the user is not*@
@page "/searchresults/worker/{startDateTime}/{endDateTime}/{inWorker}"
@*This page is used if the user is specified in the search and the worker is not*@
@page "/searchresults/user/{startDateTime}/{endDateTime}/{uniqueUserToSearch}"
@*This page is used if all fields in the form are filled out*@
@page "/searchresults/{startDateTime}/{endDateTime}/{uniqueUserToSearch}/{inWorker}"

@using WorkerStats.Data
@using System.Globalization
@inject WorkerStatsService WorkerStatsService

@if (workerStats == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6">
                <form>
                    <input type="button" class="btn btn-default" value="Back To Worker Stats" onclick="history.back()" />
                </form>
            </div>
            <div class="col-md-6">
                <h3>Search Results For:</h3>
                <div class="row">
                    <div class="col-md-3">
                        <h5>Start Date: <br />
                        @convertedStartDateTime</h5>
                    </div>
                    <div class="col-md-3">
                        <h5>End Date: <br />
                        @convertedEndDateTime</h5>
                    </div>
                    <div class="col-md-3">
                        <h5>Employee: <br />
                        @uniqueUserToSearch</h5>
                    </div>
                    <div class="col-md-3">
                        <h5>Type: <br />
                        @inWorker</h5>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Employee</th>
                            <th>Average</th>
                            <th>Count</th>
                            <th>Type</th>
                            <th>Time Spent</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var workerStat in workerStats)
                        {
                            <tr>
                                <td>@workerStat.Username</td>
                                <td>@workerStat.AverageSecondsElapsed</td>
                                <td>@workerStat.Count</td>
                                <td>@workerStat.InWorker</td>
                                <td>@workerStat.ConvertedTimeSpent</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Totals</b></td>
                            @foreach (var workerStat in workerStats)
                            {
                                totalCount += long.Parse(workerStat.Count);
                                totalTimeSpent += long.Parse(workerStat.TimeSpent);
                            }
                            <td></td>
                            <td><b>@totalCount</b></td>
                            <td></td>
                            <td><b>@WorkerStatsService.convertSeconds(totalTimeSpent.ToString())</b></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@code {
    //Parameters for SearchResults razor component
    [Parameter]
    public string startDateTime { get; set; }
    [Parameter]
    public string endDateTime { get; set; }
    [Parameter]
    public string uniqueUserToSearch { get; set; }
    [Parameter]
    public string inWorker { get; set; }

    public long totalCount;
    public long remainingTotalCount;
    public long totalTimeSpent;
    public string convertedStartDateTime;
    public string convertedEndDateTime;
    private List<WorkerStats> workerStats { get; set; }

    protected override async Task OnInitializedAsync()
    {
        convertedStartDateTime = DateTime.ParseExact(startDateTime, "yyyy-MM-dd", CultureInfo.InvariantCulture).ToString("MM-dd-yyyy");
        convertedEndDateTime = DateTime.ParseExact(endDateTime, "yyyy-MM-dd", CultureInfo.InvariantCulture).ToString("MM-dd-yyyy");
        workerStats = await WorkerStatsService.SearchResultsAsync(startDateTime, endDateTime, uniqueUserToSearch, inWorker);
    }
}